// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ClickUpTypeScriptEcsServiceProject default action metadata creates expected files 1`] = `
[
  ".eslintrc.json",
  ".gitattributes",
  ".github/pull_request_template.md",
  ".github/workflows/add-to-project.yml",
  ".github/workflows/add-to-update-projen-project.yml",
  ".github/workflows/auto-approve.yml",
  ".github/workflows/build.yml",
  ".github/workflows/ecs-service-build-publish.yml",
  ".github/workflows/ecs-service-deploy.yml",
  ".github/workflows/harness-deploy.yml",
  ".github/workflows/pull-request-lint.yml",
  ".github/workflows/release.yml",
  ".github/workflows/renovate.yml",
  ".github/workflows/semgrep.yml",
  ".github/workflows/update-projen-main.yml",
  ".gitignore",
  ".mergify.yml",
  ".npmignore",
  ".nvmrc",
  ".prettierignore",
  ".prettierrc.json",
  ".projen/deps.json",
  ".projen/files.json",
  ".projen/tasks.json",
  "codecov.yml",
  "Dockerfile",
  "package.json",
  "README.md",
  "renovate.json5",
  "scripts/docker-build.sh",
  "scripts/docker-healthcheck.sh",
  "src/index.ts",
  "test/hello.test.ts",
  "tsconfig.dev.json",
  "tsconfig.json",
  "typedoc.json",
]
`;

exports[`ClickUpTypeScriptEcsServiceProject default action metadata github workflows adds CD workflow to release workflow 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
      - name: GitHub Packages authorization
        env:
          NPM_TOKEN: \${{ secrets.ALL_PACKAGE_READ_TOKEN }}
        run: |-
          cat > .npmrc <<EOF
          //npm.pkg.github.com/:_authToken=\${NPM_TOKEN}
          @time-loop:registry=https://npm.pkg.github.com/
          EOF
      - name: Make cdk-ecr-deployment sane
        run: export FORCE_PREBUILT_LAMBDA=1
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - name: release
        run: npx projen release
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: \${{ secrets.CODECOV_TOKEN }}
          directory: coverage
      - name: Check for new commits
        id: git_remote
        run: echo "latest_commit=$(git ls-remote origin -h \${{ github.ref }} | cut -f1)" >> $GITHUB_OUTPUT
      - name: Backup artifact permissions
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: cd dist && getfacl -R . > permissions-backup.acl
        continue-on-error: true
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: "16"
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Restore build artifact permissions
        run: cd dist && setfacl --restore=permissions-backup.acl
        continue-on-error: true
      - name: Release
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q "Release.tag_name already exists" $errout; then cat $errout; exit $exitcode; fi
  release_npm:
    name: Publish to npm
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: "16"
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Restore build artifact permissions
        run: cd dist && setfacl --restore=permissions-backup.acl
        continue-on-error: true
      - name: Release
        env:
          NPM_DIST_TAG: latest
          NPM_REGISTRY: npm.pkg.github.com
          NPM_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        run: npx -p publib@latest publib-npm
  send_release_event_to_slack:
    name: Send Release Alert to Slack
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Get version
        id: event_metadata
        run: echo "release_tag=$(cat dist/releasetag.txt)" >> $GITHUB_OUTPUT
      - name: Send Slack webhook event
        uses: rtCamp/action-slack-notify@12e36fc18b0689399306c2e0b3e0f2978b7f1ee7
        env:
          SLACK_TITLE: \${{ github.repository }}@\${{ steps.event_metadata.outputs.release_tag }} released!
          SLACK_MESSAGE: "View the release notes here: https://github.com/\${{ github.repository }}/releases/tag/\${{ steps.event_metadata.outputs.release_tag }}"
          SLACK_WEBHOOK: \${{ secrets.PROJEN_RELEASE_SLACK_WEBHOOK }}
          SLACK_FOOTER: ""
          SLACK_COLOR: success
          MSG_MINIMAL: "true"
  cd:
    name: Deploy test to ECS
    needs: release
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      packages: read
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Get version
        id: event_metadata
        run: echo "release_tag=$(cat dist/releasetag.txt)" >> $GITHUB_OUTPUT
      - name: Deploy
        uses: ./.github/workflows/ecs-service-deploy.yml
        with:
          service-name: test
          version: \${{ steps.event_metadata.outputs.release_tag }}
          harness-account-identifier: \${{ secrets.HARNESS_ACCOUNT_IDENTIFIER }}
"
`;

exports[`ClickUpTypeScriptEcsServiceProject default action metadata github workflows adds CI workflow to build workflow 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: build
on:
  pull_request: {}
  workflow_dispatch: {}
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      self_mutation_happened: \${{ steps.self_mutation.outputs.self_mutation_happened }}
    env:
      CI: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: \${{ github.event.pull_request.head.ref }}
          repository: \${{ github.event.pull_request.head.repo.full_name }}
      - name: GitHub Packages authorization
        env:
          NPM_TOKEN: \${{ secrets.ALL_PACKAGE_READ_TOKEN }}
        run: |-
          cat > .npmrc <<EOF
          //npm.pkg.github.com/:_authToken=\${NPM_TOKEN}
          @time-loop:registry=https://npm.pkg.github.com/
          EOF
      - name: Make cdk-ecr-deployment sane
        run: export FORCE_PREBUILT_LAMBDA=1
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"
      - name: Install dependencies
        run: yarn install --check-files
      - name: build
        run: npx projen build
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: \${{ secrets.CODECOV_TOKEN }}
          directory: coverage
      - name: Find mutations
        id: self_mutation
        run: |-
          git add .
          git diff --staged --patch --exit-code > .repo.patch || echo "self_mutation_happened=true" >> $GITHUB_OUTPUT
      - name: Upload patch
        if: steps.self_mutation.outputs.self_mutation_happened
        uses: actions/upload-artifact@v3
        with:
          name: .repo.patch
          path: .repo.patch
      - name: Fail build on mutation
        if: steps.self_mutation.outputs.self_mutation_happened
        run: |-
          echo "::error::Files were changed during build (see build log). If this was triggered from a fork, you will need to update your branch."
          cat .repo.patch
          exit 1
      - name: Backup artifact permissions
        run: cd dist && getfacl -R . > permissions-backup.acl
        continue-on-error: true
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: dist
  self-mutation:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: always() && needs.build.outputs.self_mutation_happened && !(github.event.pull_request.head.repo.full_name != github.repository)
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: \${{ secrets.PROJEN_GITHUB_TOKEN }}
          ref: \${{ github.event.pull_request.head.ref }}
          repository: \${{ github.event.pull_request.head.repo.full_name }}
      - name: Download patch
        uses: actions/download-artifact@v3
        with:
          name: .repo.patch
          path: \${{ runner.temp }}
      - name: Apply patch
        run: '[ -s \${{ runner.temp }}/.repo.patch ] && git apply \${{ runner.temp }}/.repo.patch || echo "Empty patch. Skipping."'
      - name: Set git identity
        run: |-
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
      - name: Push changes
        env:
          PULL_REQUEST_REF: \${{ github.event.pull_request.head.ref }}
        run: |-
          git add .
          git commit -s -m "chore: self mutation"
          git push origin HEAD:$PULL_REQUEST_REF
  ci:
    name: Docker Build and Publish
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      packages: read
    env:
      FORCE_COLOR: "3"
      GIT_TAG_PREFIX: backend
    if: "! needs.build.outputs.self_mutation_happened"
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Restore build artifact permissions
        run: cd dist && setfacl --restore=permissions-backup.acl
        continue-on-error: true
      - name: Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Get version
        id: event_metadata
        run: echo "release_tag=$(cat dist/releasetag.txt)" >> $GITHUB_OUTPUT
      - name: Build and Publish Docker Image to ECR
        uses: ./.github/workflows/ecs-service-build-publish.yml
        with:
          version: \${{ steps.event_metadata.outputs.release_tag }}
          service-name: test
          all-package-read-token: \${{ secrets.ALL_PACKAGE_READ_TOKEN }}
          buildcache-aws-access-key-id: \${{ secrets.ECR_BUILD_CACHE_AWS_ACCESS_KEY_ID }}
          buildcache-aws-secret-access-key: \${{ secrets.ECR_BUILD_CACHE_AWS_SECRET_ACCESS_KEY }}
          buildcache-aws-region: \${{ secrets.ECR_BUILD_CACHE_AWS_REGION }}
          lacework-account-name: \${{ secrets.LW_ACCOUNT_NAME }}
          lacework-access-token: \${{ secrets.LW_ACCESS_TOKEN }}
          skip-health-check: false
          is-nest-app: true
          skip-vulnerability-scan: true
"
`;

exports[`ClickUpTypeScriptEcsServiceProject default action metadata github workflows creates expected workflow files 1`] = `
[
  ".github/pull_request_template.md",
  ".github/workflows/add-to-project.yml",
  ".github/workflows/add-to-update-projen-project.yml",
  ".github/workflows/auto-approve.yml",
  ".github/workflows/build.yml",
  ".github/workflows/ecs-service-build-publish.yml",
  ".github/workflows/ecs-service-deploy.yml",
  ".github/workflows/harness-deploy.yml",
  ".github/workflows/pull-request-lint.yml",
  ".github/workflows/release.yml",
  ".github/workflows/renovate.yml",
  ".github/workflows/semgrep.yml",
  ".github/workflows/update-projen-main.yml",
]
`;

exports[`ClickUpTypeScriptEcsServiceProject default action metadata github workflows creates proper ecs-service-build-publish.yml contents 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: Build and Publish Service Image to ECR
on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
      docker-build-args:
        required: false
        description: Build arguments passed to the docker build command
        type: string
        default: |-
          --progress=plain \\
          --secret "id=npmrc,src=\${HOME}/.npmrc" \\
          --iidfile /tmp/IMAGE_ID
      is-nest-app:
        type: boolean
        default: true
      skip-health-check:
        type: boolean
        default: false
      skip-vulnerability-scan:
        type: boolean
        default: false
      buildcache-aws-access-key-id:
        type: string
        required: true
      buildcache-aws-secret-access-key:
        type: string
        required: true
      buildcache-aws-region:
        type: string
        required: true
      lacework-account-name:
        type: string
        required: true
      lacework-access-token:
        type: string
        required: true
      all-package-read-token:
        type: string
        required: true
      version:
        description: The version number that was created for the deploy.
        required: true
        type: string
env:
  DOCKER_TAG_COMMIT: git-sha-\${{ inputs.service-name }}-\${GITHUB_SHA}
  DOCKER_TAG_BASE: git-ref-\${{ inputs.service-name }}-\${GITHUB_BASE_REF//\\//-}
  DOCKER_TAG_HEAD: git-ref-\${{ inputs.service-name }}-\${GITHUB_HEAD_REF//\\//-}
  DOCKER_TAG_CUR: git-ref-\${{ inputs.service-name }}-\${GITHUB_REF_NAME//\\//-}
  DOCKER_TAG_DRAFT_COMMIT: draft-git-sha-\${{ inputs.service-name }}-\${GITHUB_SHA}
  DOCKER_TAG_DRAFT_CUR: draft-git-ref-\${{ inputs.service-name }}-\${GITHUB_REF_NAME//\\//-}
jobs:
  docker-build-arm64:
    name: Build-arm64
    runs-on:
      - self-hosted
      - ARM64
    permissions:
      contents: read
    outputs:
      docker-tag-draft-commit: \${{ env.DOCKER_TAG_DRAFT_COMMIT }}
      docker-tag-commit: \${{ env.DOCKER_TAG_COMMIT }}
      docker-tag-cur: \${{ env.DOCKER_TAG_CUR }}
    steps:
      - name: Check docker volume utilization
        run: bash -c 'if [[ \`df /var/lib/docker --output=pcent | sed 1d | tr -d " %"\` > 85 ]]; then docker system prune -af ; else df -h /var/lib/docker | sed 1d; fi'
      - name: Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
      - name: Setup NodeJs
        uses: actions/setup-node@5e21ff4d9bc1a8cf6de233a3057d20ec6b3fb69d
        with:
          node-version: "16"
      - name: Buildcache Repo Login
        uses: time-loop/github-actions/dist/docker-ecr-login@53f03c9bc36389e6b4e671bd8a3cc6286ef37044
        id: buildcache
        with:
          aws-access-key-id: \${{ secrets.ECR_BUILD_CACHE_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: \${{ secrets.ECR_BUILD_CACHE_AWS_SECRET_ACCESS_KEY }}
          aws-region: \${{ secrets.ECR_BUILD_CACHE_AWS_REGION }}
          ecr-repo-name: monorepo-buildcache
      - name: Configure NPM
        run: echo "//npm.pkg.github.com/:_authToken=\${{ inputs.all-package-read-token }}" >> ~/.npmrc
      - uses: pnpm/action-setup@d882d12c64e032187b2edb46d3a0d003b7a43598
      - name: Build image
        uses: nick-fields/retry@943e742917ac94714d2f408a0e8320f2d1fcafcd
        with:
          max_attempts: 3
          timeout_minutes: 25
          command: |-
            bash ./scripts/docker-build.sh \\
            \${{ inputs.docker-build-args }} \\
            --build-arg VERSION="\${{ inputs.version }}" \\
            --build-arg ARCH=arm64v8
            test -e /tmp/IMAGE_ID || exit 1
            echo "DOCKER_IMAGE_ID=$(cat /tmp/IMAGE_ID)" >> $GITHUB_ENV
      - name: Publish image as draft
        if: startsWith(github.ref, "refs/heads/")
        runNow: |-
          docker tag \${{ env.DOCKER_IMAGE_ID }} "\${{ steps.buildcache.outputs.docker-repo-uri }}:\${{ env.DOCKER_TAG_DRAFT_COMMIT }}-arm64"
          docker push --all-tags "\${{ steps.buildcache.outputs.docker-repo-uri }}"
  docker-build-amd64:
    name: Build-amd64
    runs-on:
      - self-hosted
      - X64
    permissions:
      contents: read
    outputs:
      docker-tag-draft-commit: \${{ env.DOCKER_TAG_DRAFT_COMMIT }}
      docker-tag-commit: \${{ env.DOCKER_TAG_COMMIT }}
      docker-tag-cur: \${{ env.DOCKER_TAG_CUR }}
    steps:
      - name: Check docker volume utilization
        run: bash -c 'if [[ \`df /var/lib/docker --output=pcent | sed 1d | tr -d " %"\` > 85 ]]; then docker system prune -af ; else df -h /var/lib/docker | sed 1d; fi'
      - name: Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
      - name: Setup NodeJs
        uses: actions/setup-node@5e21ff4d9bc1a8cf6de233a3057d20ec6b3fb69d
        with:
          node-version: "16"
      - name: Buildcache Repo Login
        uses: time-loop/github-actions/dist/docker-ecr-login@53f03c9bc36389e6b4e671bd8a3cc6286ef37044
        id: buildcache
        with:
          aws-access-key-id: \${{ secrets.ECR_BUILD_CACHE_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: \${{ secrets.ECR_BUILD_CACHE_AWS_SECRET_ACCESS_KEY }}
          aws-region: \${{ secrets.ECR_BUILD_CACHE_AWS_REGION }}
          ecr-repo-name: monorepo-buildcache
      - name: Configure NPM
        run: echo "//npm.pkg.github.com/:_authToken=\${{ inputs.all-package-read-token }}" >> ~/.npmrc
      - uses: pnpm/action-setup@d882d12c64e032187b2edb46d3a0d003b7a43598
      - name: Build image
        uses: nick-fields/retry@943e742917ac94714d2f408a0e8320f2d1fcafcd
        with:
          max_attempts: 3
          timeout_minutes: 25
          command: |-
            bash ./scripts/docker-build.sh \\
            \${{ inputs.docker-build-args }} \\
            --build-arg VERSION="\${{ inputs.version }}" \\
            --build-arg ARCH=amd64
            test -e /tmp/IMAGE_ID || exit 1
            echo "DOCKER_IMAGE_ID=$(cat /tmp/IMAGE_ID)" >> $GITHUB_ENV
      - name: Publish image as draft
        if: startsWith(github.ref, "refs/heads/")
        runNow: |-
          docker tag \${{ env.DOCKER_IMAGE_ID }} "\${{ steps.buildcache.outputs.docker-repo-uri }}:\${{ env.DOCKER_TAG_DRAFT_COMMIT }}-amd64"
          docker tag \${{ env.DOCKER_IMAGE_ID }} "\${{ steps.buildcache.outputs.docker-repo-uri }}:\${{ env.DOCKER_TAG_DRAFT_COMMIT }}"
          docker push --all-tags "\${{ steps.buildcache.outputs.docker-repo-uri }}"
  vulnerability-scan:
    needs:
      - docker-build-arm64
      - docker-build-amd64
    name: Vulnerability Scan
    if: \${{ github.ref_name == 'main' && !inputs.skip-vulnerability-scan }}
    continue-on-error: true
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
      - name: Docker Vulnerability Scan
        uses: time-loop/github-actions/dist/docker-vulnerability-scan@53f03c9bc36389e6b4e671bd8a3cc6286ef37044
        id: vulnerability-scan
        with:
          buildcache-aws-access-key-id: \${{ inputs.buildcache-aws-access-key-id }}
          buildcache-aws-secret-access-key: \${{ inputs.buildcache-aws-secret-access-key }}
          buildcache-aws-region: \${{ inputs.buildcache-aws-region }}
          buildcache-ecr-repo-name: monorepo-buildcache
          buildcache-pull-tag: \${{ env.DOCKER_TAG_DRAFT_COMMIT }}-amd64
          lacework-account-name: \${{ inputs.lacework-account-name }}
          lacework-access-token: \${{ inputs.lacework-account-token }}
  docker-validate:
    if: startsWith(github.ref, "refs/heads/")
    needs:
      - docker-build-arm64
      - docker-build-amd64
    name: Validate
    strategy:
      matrix:
        step:
          - healthcheck-verification
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
      - name: Buildcache Repo Login
        uses: time-loop/github-actions/dist/docker-ecr-login@53f03c9bc36389e6b4e671bd8a3cc6286ef37044
        id: buildcache
        with:
          aws-access-key-id: \${{ secrets.ECR_BUILD_CACHE_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: \${{ secrets.ECR_BUILD_CACHE_AWS_SECRET_ACCESS_KEY }}
          aws-region: \${{ secrets.ECR_BUILD_CACHE_AWS_REGION }}
          ecr-repo-name: monorepo-buildcache
      - name: Pull Image
        uses: time-loop/github-actions/dist/docker-ecr-retag-push@53f03c9bc36389e6b4e671bd8a3cc6286ef37044
        id: buildcache-pull
        with:
          docker-repo-uri: \${{ steps.buildcache.outputs.docker-repo-uri }}
          pull-tag: \${{ env.DOCKER_TAG_DRAFT_COMMIT }}-amd64
      - name: healthcheck verification setup (nestjs)
        if: matrix.step == "healthcheck-verification" && inputs.is-nest-app && !inputs.skip-health-check
        uses: nick-fields/retry@943e742917ac94714d2f408a0e8320f2d1fcafcd
        with:
          max_attempts: 3
          timeout_minutes: 2
          command: |-
            docker-compose --profile localstack up -d
            docker run \\
            -e AWS_ACCESS_KEY_ID="\${AWS_ACCESS_KEY_ID}" \\
            -e AWS_SECRET_ACCESS_KEY="\${AWS_SECRET_ACCESS_KEY}" \\
            -e DOCKER=true \\
            -e TEST_SERVER=true \\
            -e CLICKUP_ENV=test \\
            -e AWS_REGION=us-west-2 \\
            -e AWS_ACCESS_KEY_ID=test \\
            -e AWS_SECRET_ACCESS_KEY=test \\
            --net=host \\
            -d \\
            --cidfile /tmp/CONTAINER_ID \\
            "\${{ steps.buildcache-pull.outputs.pulled-image-id }}" \\
            node ./main.js
      - name: healthcheck verification setup (generic)
        if: matrix.step == "healthcheck-verification" && !inputs.is-nest-app && !inputs.skip-health-check
        run: |-
          docker run \\
          -d \\
          --cidfile /tmp/CONTAINER_ID \\
          "\${{ steps.buildcache-pull.outputs.pulled-image-id }}"
      - name: healthcheck verification
        if: matrix.step == "healthcheck-verification" && !inputs.skip-health-check
        run: |-
          DOCKER_CONTAINER_ID="$(cat /tmp/CONTAINER_ID)"

          for i in {1..40}; do
            sleep 5;
            DOCKER_STATUS=$(docker inspect $DOCKER_CONTAINER_ID --format '{{ .State.Status }}')
            DOCKER_HEALTH=$(docker inspect $DOCKER_CONTAINER_ID --format '{{ .State.Health.Status }}')
            echo "Status: \${DOCKER_STATUS}; Health: \${DOCKER_HEALTH}"
            if [ "\${DOCKER_STATUS}" == "running" ] && [ "\${DOCKER_HEALTH}" == "healthy" ]; then
              echo "Container is running and healthy!" 
              exit 0
            fi
          done;
          echo "Failed to get container healthy!"
          echo "Docker logs:"
          docker logs -n all $DOCKER_CONTAINER_ID
          echo "Docker inspect:"
          docker inspect $DOCKER_CONTAINER_ID
          exit 1
  docker-publish-buildcache:
    if: startsWith(github.ref, "refs/heads/")
    needs:
      - docker-build-arm64
      - docker-build-amd64
      - docker-validate
    name: Publish to Buildcache
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
      - name: Buildcache Repo Login
        uses: time-loop/github-actions/dist/docker-ecr-login@53f03c9bc36389e6b4e671bd8a3cc6286ef37044
        id: buildcache
        with:
          aws-access-key-id: \${{ secrets.ECR_BUILD_CACHE_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: \${{ secrets.ECR_BUILD_CACHE_AWS_SECRET_ACCESS_KEY }}
          aws-region: \${{ secrets.ECR_BUILD_CACHE_AWS_REGION }}
          ecr-repo-name: monorepo-buildcache
      - name: Pull Image arm64
        uses: time-loop/github-actions/dist/docker-ecr-retag-push@53f03c9bc36389e6b4e671bd8a3cc6286ef37044
        id: buildcache-pull-arm64
        with:
          docker-repo-uri: \${{ steps.buildcache.outputs.docker-repo-uri }}
          pull-tag: \${{ env.DOCKER_TAG_DRAFT_COMMIT }}-arm64
      - name: Pull Image amd64
        uses: time-loop/github-actions/dist/docker-ecr-retag-push@53f03c9bc36389e6b4e671bd8a3cc6286ef37044
        id: buildcache-pull-amd64
        with:
          docker-repo-uri: \${{ steps.buildcache.outputs.docker-repo-uri }}
          pull-tag: \${{ env.DOCKER_TAG_DRAFT_COMMIT }}-amd64
      - name: Tag draft docker image with commit hash
        run: |-
          docker tag "\${{ steps.buildcache-pull-arm64.outputs.pulled-image-id }}" "\${{ steps.buildcache.outputs.docker-repo-uri }}:\${{ env.DOCKER_TAG_COMMIT }}-arm64"
          docker tag "\${{ steps.buildcache-pull-amd64.outputs.pulled-image-id }}" "\${{ steps.buildcache.outputs.docker-repo-uri }}:\${{ env.DOCKER_TAG_COMMIT }}-amd64"
      - name: Tag draft image with branch name
        if: \${{ github.event_name == 'push' }}
        run: |-
          docker tag "\${{ steps.buildcache-pull-arm64.outputs.pulled-image-id }}" "\${{ steps.buildcache.outputs.docker-repo-uri }}:\${{ env.DOCKER_TAG_CUR }}-arm64"
          docker tag "\${{ steps.buildcache-pull-amd64.outputs.pulled-image-id }}" "\${{ steps.buildcache.outputs.docker-repo-uri }}:\${{ env.DOCKER_TAG_CUR }}-amd64"
      - name: Publish tags
        run: |-
          docker push --all-tags "\${{ steps.buildcache.outputs.docker-repo-uri }}"
          docker manifest create "\${{ steps.buildcache.outputs.docker-repo-uri }}:\${{ env.DOCKER_TAG_DRAFT_COMMIT }}" \\
          --amend "\${{ steps.buildcache.outputs.docker-repo-uri }}:\${{ env.DOCKER_TAG_DRAFT_COMMIT }}-arm64" \\
          --amend "\${{ steps.buildcache.outputs.docker-repo-uri }}:\${{ env.DOCKER_TAG_DRAFT_COMMIT }}-amd64"
          docker manifest push "\${{ steps.buildcache.outputs.docker-repo-uri }}:\${{ env.DOCKER_TAG_DRAFT_COMMIT }}"
          docker manifest create "\${{ steps.buildcache.outputs.docker-repo-uri }}:\${{ env.DOCKER_TAG_COMMIT }}" \\
          --amend "\${{ steps.buildcache.outputs.docker-repo-uri }}:\${{ env.DOCKER_TAG_COMMIT }}-arm64" \\
          --amend "\${{ steps.buildcache.outputs.docker-repo-uri }}:\${{ env.DOCKER_TAG_COMMIT }}-amd64"
          docker manifest push "\${{ steps.buildcache.outputs.docker-repo-uri }}:\${{ env.DOCKER_TAG_COMMIT }}"
          docker manifest create "\${{ steps.buildcache.outputs.docker-repo-uri }}:\${{ env.DOCKER_TAG_CUR }}" \\
          --amend "\${{ steps.buildcache.outputs.docker-repo-uri }}:\${{ env.DOCKER_TAG_CUR }}-arm64" \\
          --amend "\${{ steps.buildcache.outputs.docker-repo-uri }}:\${{ env.DOCKER_TAG_CUR }}-amd64"
          docker manifest push "\${{ steps.buildcache.outputs.docker-repo-uri }}:\${{ env.DOCKER_TAG_CUR }}"
"
`;

exports[`ClickUpTypeScriptEcsServiceProject default action metadata github workflows creates proper ecs-service-deploy.yml contents 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: Deploy Service Image to ECS
on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
      version:
        description: The version number that was created for the deploy.
        required: true
        type: string
      harness-account-identifier:
        description: Harness account identifier for Harness pipelines.
        required: true
        type: string
env:
  DOCKER_TAG_COMMIT: git-sha-\${{ inputs.service-name }}-\${GITHUB_SHA}
  DOCKER_TAG_BASE: git-ref-\${{ inputs.service-name }}-\${GITHUB_BASE_REF//\\//-}
  DOCKER_TAG_HEAD: git-ref-\${{ inputs.service-name }}-\${GITHUB_HEAD_REF//\\//-}
  DOCKER_TAG_CUR: git-ref-\${{ inputs.service-name }}-\${GITHUB_REF_NAME//\\//-}
  DOCKER_TAG_DRAFT_COMMIT: draft-git-sha-\${{ inputs.service-name }}-\${GITHUB_SHA}
  DOCKER_TAG_DRAFT_CUR: draft-git-ref-\${{ inputs.service-name }}-\${GITHUB_REF_NAME//\\//-}
jobs:
  formatting:
    name: Generate Harness Webhook URLs
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      ACCOUNT_IDENTIFIER: \${{ inputs.harness-account-identifier }}
      ORG_IDENTIFIER: ClickUp
      PROJECT_IDENTIFIER: clickupbackend
    outputs:
      harness-webhook-url-qa: \${{ steps.qa.outputs.webhook-url }}
    steps:
      - name: Generate Qa webhook URL
        id: qa
        run: |-
          export SERVICE_ID=$(echo "\${{ inputs.service-name }}" | sed 's/-/_/g')
          export QA_WEBHOOK_URL=$(echo "https://app.harness.io/gateway/pipeline/api/webhook/custom/v2?accountIdentifier=\${ACCOUNT_IDENTIFIER}&orgIdentifier=\${ORG_IDENTIFIER}&projectIdentifier=\${PROJECT_IDENTIFIER}&pipelineIdentifier=qa_\${SERVICE_ID}_deploy&triggerIdentifier=customwebhook_qa_\${SERVICE_ID}")
          echo $QA_WEBHOOK_URL
          echo "webhook-url=$QA_WEBHOOK_URL" >> "$GITHUB_OUTPUT"
  docker-deploy-qa:
    name: Deploy to qa
    if: github.ref == 'refs/heads/main'
    needs:
      - formatting
    permissions:
      contents: read
      actions: read
    concurrency:
      group: \${{ github.workflow }}-\${{ inputs.service-name }}-\${{ github.ref_name }}
    uses: ./.github/workflows/harness-deploy.yml
    with:
      buildcache-ecr-repo-name: monorepo-buildcache
      buildcache-pull-tag: \${{ needs.docker-build.outputs.docker-tag-draft-commit }}
      github-environment: ecs-deploy-user-usqa
      deploy-aws-region: us-east-1
      deploy-clickup-env: usQa
      deploy-type: monorepo
      deploy-service-name: \${{ inputs.service-name }}
      deploy-ecr-repo-name: monorepo-deploy-us-qa
      deploy-push-tags: \${{ needs.docker-build.outputs.docker-tag-cur }} \${{ needs.docker-build.outputs.docker-tag-commit }}
      deploy-harness-webhook: \${{ needs.formatting.outputs.harness-webhook-url-qa || '' }}
      version: \${{ inputs.version }}
    secrets:
      buildcache-aws-access-key-id: \${{ secrets.ECR_BUILD_CACHE_AWS_ACCESS_KEY_ID }}
      buildcache-aws-secret-access-key: \${{ secrets.ECR_BUILD_CACHE_AWS_SECRET_ACCESS_KEY }}
      buildcache-aws-region: \${{ secrets.ECR_BUILD_CACHE_AWS_REGION }}
      github-packages-read-token: \${{ secrets.ALL_PACKAGE_READ_TOKEN }}
      ecs-alerts-slack-webhook: \${{ secrets.ECS_ALERTS_SLACK_WEBHOOK }}
      deploy-harness-api-token: \${{ secrets.HARNESS_API_TOKEN }}
      deploy-aws-access-key-id: \${{ secrets.AWS_ACCESS_KEY_ID }}
      deploy-aws-secret-access-key: \${{ secrets.AWS_SECRET_ACCESS_KEY }}
"
`;

exports[`ClickUpTypeScriptEcsServiceProject default action metadata github workflows creates proper harness-deploy.yml contents 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: Harness Deploy
on:
  workflow_call:
    inputs:
      github-environment:
        description: GitHub environment name that will contain AWS secrets
        required: true
        type: string
      buildcache-ecr-repo-name:
        description: ECR repository name
        required: true
        type: string
      buildcache-pull-tag:
        description: Tag to pull automatically
        required: false
        type: string
      deploy-aws-region:
        description: Amazon region containing the Lambda to deploy a group of services
        required: true
        type: string
      deploy-clickup-env:
        description: The ClickUp environment to deploy to. E.g. "usQa", "globalStaging", "globalProd", etc.
        required: true
        type: string
      deploy-ecr-repo-name:
        description: ECR repository name
        required: true
        type: string
      deploy-push-tags:
        description: Tags to push separated by space
        required: false
        type: string
      deploy-harness-webhook:
        description: The Harness webhook to trigger a deployment
        default: ""
        required: false
        type: string
      deploy-type:
        description: Are we deploying the monolith, or the monorepo? e.g. "monolith" or "monorepo"
        required: true
        type: string
      deploy-service-name:
        description: If deploy-type = monorepo, this should be the micro service name that is being deployed
        required: false
        type: string
      version:
        description: The version number that was created for the deploy.
        required: true
        type: string
    secrets:
      buildcache-aws-access-key-id:
        description: Amazon access key id for build cache user
        required: true
      buildcache-aws-secret-access-key:
        description: Amazon access key for build cache user
        required: true
      buildcache-aws-region:
        description: Amazon region
        required: true
      github-packages-read-token:
        description: A Github personal access token that has read permission for private github packages
        required: true
      ecs-alerts-slack-webhook:
        description: A slack webhook to post alerts on ECS deployment failures
        required: true
      deploy-harness-api-token:
        description: A Harness API token to trigger a deployment
        required: true
      deploy-aws-access-key-id:
        description: Amazon access key id for deploy user
        required: true
      deploy-aws-secret-access-key:
        description: Amazon access key for deploy user
        required: true
jobs:
  start-deploy:
    name: Start deploy
    runs-on: ubuntu-latest
    environment: \${{ inputs.github-environment }}
    permissions:
      contents: read
      actions: read
    outputs:
      trigger-response: \${{ steps.harness-trigger.outputs.response }}
    steps:
      - name: Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
      - name: Buildcache Repo Login
        uses: time-loop/github-actions/dist/docker-ecr-login@53f03c9bc36389e6b4e671bd8a3cc6286ef37044
        id: buildcache
        with:
          aws-access-key-id: \${{ secrets.ECR_BUILD_CACHE_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: \${{ secrets.ECR_BUILD_CACHE_AWS_SECRET_ACCESS_KEY }}
          aws-region: \${{ secrets.ECR_BUILD_CACHE_AWS_REGION }}
          ecr-repo-name: monorepo-buildcache
      - name: Copy Manifest contents
        id: copy-manifest
        shell: bash
        env:
          SRC_DOCKER_REPO: \${{ steps.buildcache.outputs.docker-repo-uri }}
          DST_DOCKER_REPO: \${{ steps.deploy-repo.outputs.docker-repo-uri }}
        run:
          - set -ex
          - export SRC_DOCKER_TAG="\${{ inputs.buildcache-pull-tag }}"
          - export DST_DOCKER_TAGS="\${{ inputs.deploy-push-tags }} version-\${{ inputs.deploy-service-name && format('{0}-', inputs.deploy-service-name) || "" }}\${{ inputs.version || steps.version.outputs.version }}"
          - SRC_DOCKER_IMAGE="\${SRC_DOCKER_REPO}:\${SRC_DOCKER_TAG}"
          - DIGESTS=($(docker manifest inspect "$SRC_DOCKER_IMAGE" | jq -r '.manifests[].digest'))
          - |-
            for digest in "\${DIGESTS[@]}"; do
              DST_SHA_DOCKER_TAG=$(echo \${digest} | tr ':' '-')

              docker pull "\${SRC_DOCKER_REPO}@\${digest}"
              docker tag "\${SRC_DOCKER_REPO}@\${digest}" "\${DST_DOCKER_REPO}:\${DST_SHA_DOCKER_TAG}"
            done
          - docker push "\${DST_DOCKER_REPO}" --all-tags
          - |-
            for digest in "\${DIGESTS[@]}"; do
              DST_SHA_DOCKER_TAG=$(echo \${digest} | tr ':' '-')

              for DST_DOCKER_TAG in \${DST_DOCKER_TAGS}; do
                docker manifest create "\${DST_DOCKER_REPO}:\${DST_DOCKER_TAG}" --amend "\${DST_DOCKER_REPO}:\${DST_SHA_DOCKER_TAG}"
              done
            done
          - |-
            for DST_DOCKER_TAG in \${DST_DOCKER_TAGS}; do
              docker manifest push "\${DST_DOCKER_REPO}:\${DST_DOCKER_TAG}"
            done
          - echo "did-image-push=true" >> $GITHUB_OUTPUT
      - name: Harness Deployment Trigger
        if: \${{ steps.copy-manifest.outputs.did-image-push && inputs.deploy-harness-webhook != "" }}
        env:
          docker_tag: version-\${{ inputs.deploy-service-name && format('{0}-', inputs.deploy-service-name) || "" }}\${{ inputs.version || steps.version.outputs.version }}
        uses: fjogeleit/http-request-action@eab8015483ccea148feff7b1c65f320805ddc2bf
        id: harness-trigger
        with:
          url: \${{ inputs.deploy-harness-webhook }}
          method: POST
          customHeaders: '{"Content-Type": "application/json", "X-Api-Key": "\${{ secrets.deploy-harness-api-token }}"}'
          data: '{"image_tag": "\${{ env.docker_tag }}"}'
      - name: Harness Deployment Response
        run: echo '\${{ steps.harness-trigger.outputs.response }}' | jq .
  harness-healthchecks:
    name: Post deploy healthchecks
    runs-on: ubuntu-latest
    environment: \${{ inputs.github-environment }}
    needs:
      - start-deploy
    if: \${{ (success() || failure()) && needs.start-deploy.outputs.trigger-response }}
    permissions:
      contents: read
      actions: read
    steps:
      - name: Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
      - name: Get Harness Pipeline Execution URL
        shell: bash
        run: echo \${{ fromJSON(needs.start-deploy.outputs.trigger-response).data.uiUrl }}
      - name: Get Harness Pipeline Status
        if: \${{ inputs.deploy-harness-webhook != '' }}
        id: harness-pipeline-wait
        uses: ./.github/actions/harness-pipeline-wait
        with:
          harness-api-token: \${{ secrets.deploy-harness-api-token }}
          harness-execution-url: \${{ fromJSON(needs.start-deploy.outputs.trigger-response).data.apiUrl }}
"
`;

exports[`ClickUpTypeScriptEcsServiceProject default action metadata has appropriate package.json 1`] = `
{
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
  "author": {
    "name": "ClickUp",
    "organization": true,
  },
  "dependencies": {
    "@time-loop/clickup-projen": "*",
  },
  "devDependencies": {
    "@types/jest": "*",
    "@types/node": "^14",
    "@typescript-eslint/eslint-plugin": "^5",
    "@typescript-eslint/parser": "^5",
    "esbuild": "*",
    "eslint": "^8",
    "eslint-config-prettier": "*",
    "eslint-import-resolver-node": "*",
    "eslint-import-resolver-typescript": "*",
    "eslint-plugin-import": "*",
    "eslint-plugin-prettier": "*",
    "jest": "*",
    "jest-junit": "^15",
    "jsii-release": "*",
    "npm-check-updates": "^16",
    "prettier": "*",
    "projen": "*",
    "standard-version": "^9",
    "ts-jest": "*",
    "ts-node": "^10",
    "typedoc": "*",
    "typedoc-plugin-markdown": "*",
    "typescript": "*",
  },
  "engines": {
    "node": ">= 14.18.0",
  },
  "jest": {
    "clearMocks": true,
    "collectCoverage": true,
    "collectCoverageFrom": [
      "src/**/*.ts",
    ],
    "coverageDirectory": "coverage",
    "coveragePathIgnorePatterns": [
      "/node_modules/",
    ],
    "coverageReporters": [
      "json",
      "lcov",
      "clover",
      "cobertura",
      "text",
    ],
    "globals": {
      "ts-jest": {
        "tsconfig": "tsconfig.dev.json",
      },
    },
    "preset": "ts-jest",
    "reporters": [
      "default",
      [
        "jest-junit",
        {
          "outputDirectory": "test-reports",
        },
      ],
    ],
    "testMatch": [
      "<rootDir>/src/**/__tests__/**/*.ts?(x)",
      "<rootDir>/(test|src)/**/*(*.)@(spec|test).ts?(x)",
    ],
    "testPathIgnorePatterns": [
      "/node_modules/",
    ],
    "watchPathIgnorePatterns": [
      "/node_modules/",
    ],
  },
  "license": "UNLICENSED",
  "main": "lib/index.js",
  "name": "@time-loop/test",
  "publishConfig": {
    "registry": "https://npm.pkg.github.com/",
  },
  "scripts": {
    "build": "npx projen build",
    "bump": "npx projen bump",
    "clean-dist": "npx projen clean-dist",
    "clobber": "npx projen clobber",
    "compile": "npx projen compile",
    "default": "npx projen default",
    "eject": "npx projen eject",
    "eslint": "npx projen eslint",
    "package": "npx projen package",
    "post-compile": "npx projen post-compile",
    "post-upgrade": "npx projen post-upgrade",
    "pre-compile": "npx projen pre-compile",
    "projen": "npx projen",
    "release": "npx projen release",
    "test": "npx projen test",
    "test:watch": "npx projen test:watch",
    "typedocDocgen": "npx projen typedocDocgen",
    "unbump": "npx projen unbump",
    "update-projen": "npx projen update-projen",
    "upgrade": "npx projen upgrade",
    "watch": "npx projen watch",
  },
  "types": "lib/index.d.ts",
  "version": "0.0.0",
}
`;

exports[`ClickUpTypeScriptEcsServiceProject default action metadata sample app code creates Dockerfile 1`] = `
"FROM amazonlinux:latest@sha256:66d22a2b8749283aa0764e6983fbb8bf8c143511cf16c9773598acca2a1cd6d2

COPY .nvmrc ./

# Download and install node
RUN curl -fsSL https://rpm.nodesource.com/setup_$(cat .nvmrc | cut -d. -f1).x | bash - \\
    && yum clean metadata \\
    && yum -y update-minimal \\
    && yum -y install nodejs-$(cat .nvmrc)-1nodesource \\
    && yum clean all \\
    && rm -rf /var/cache/yum \\
    # smoke tests
    && node --version \\
    && npm --version

# Install other dependencies
RUN \\
    yum -y update-minimal \\
    && yum -y install \\
    # Common util
    curl \\
    # To make pnpm install work
    gcc-c++ make python3 \\
    # Runtime debugging
    psmisc \\
    && yum clean all \\
    && rm -rf /var/cache/yum

RUN node --version

WORKDIR /app

# Files required by pnpm install
COPY .npmrc package.json pnpm-lock.yaml ./
COPY ./patches ./patches

# Install package manager
RUN corepack enable

# Forces pnpm to only install production dependencies and prevents pnpm post install error from husky
ARG NODE_ENV=production

# Mount the npmrc file containing the npm token with permission to read private packages
RUN --mount=type=secret,id=npmrc,dst=/root/.npmrc npm run ci:install

# Copy your dist and source files here, set NODE_CONFIG_DIR, etc.
COPY ./dist/ .

COPY ./dist/config ./config/app/
COPY ./src/config ./config/
ENV NODE_CONFIG_DIR=./config


ARG VERSION=0.0.1
ENV VERSION=\${VERSION}

ENV PORT=80
EXPOSE 80

# Tell the app to listen on this port.
ENV DOCKER_APP_PORT=8080

# Setup docker healthcheck
COPY ./scripts/docker-healthcheck.sh ./
HEALTHCHECK --start-period=300s CMD ./docker-healthcheck.sh

CMD node ./main.js
"
`;

exports[`ClickUpTypeScriptEcsServiceProject default action metadata sample app code creates scripts/docker-build.sh 1`] = `
"#!/bin/bash
set -euox pipefail

cd $(dirname "\${BASH_SOURCE[0]}")
cd ../../

pnpm ci:install
pnpm exec nx build test

# To use \`--secrets\` it requires BuildKit. Enabling this.
# https://docs.docker.com/develop/develop-images/build_enhancements/#to-enable-buildkit-builds
export DOCKER_BUILDKIT=1

exec docker build --secret id=npmrc,src=$HOME/.npmrc -t test:1.0 -f ./Dockerfile . $@"
`;

exports[`ClickUpTypeScriptEcsServiceProject default action metadata sample app code creates scripts/docker-healthcheck.sh 1`] = `
"#!/bin/bash
set -e -o pipefail
cd $(dirname "\${BASH_SOURCE[0]}")

# Perform basic healthcheck: Check that the express service is running and can
# response on basic http request. We are not checking the full health and only
# checking that node is up and running. We must check the response status AND
# the content, since our backend returns a gif for any non-defined URL.

# TODO: Do a curl against your service, check for thumbs up like so:
curl --fail http://localhost:80/test/health | grep "Thumbs up" || exit 1

# TODO: Set up worker-type healthchecks in case ECS does not have load balancer
# attached to it which performs full healthcheck.
"
`;
