// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ClickUpCdkConstructLibrary defaults package.json 1`] = `
Object {
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
  "author": Object {
    "email": "devops@clickup.com",
    "name": "ClickUp",
    "organization": true,
  },
  "devDependencies": Object {
    "@time-loop/clickup-projen": "*",
    "@types/jest": "^27",
    "@types/node": "^14",
    "@typescript-eslint/eslint-plugin": "^5",
    "@typescript-eslint/parser": "^5",
    "aws-cdk-lib": "2.1.0",
    "constructs": "10.0.5",
    "esbuild": "*",
    "eslint": "^8",
    "eslint-config-prettier": "*",
    "eslint-import-resolver-node": "*",
    "eslint-import-resolver-typescript": "*",
    "eslint-plugin-import": "*",
    "eslint-plugin-prettier": "*",
    "jest": "^27",
    "jest-junit": "^13",
    "jsii": "*",
    "jsii-diff": "*",
    "jsii-docgen": "*",
    "jsii-pacmak": "*",
    "jsii-release": "*",
    "json-schema": "*",
    "npm-check-updates": "^15",
    "prettier": "*",
    "projen": "*",
    "standard-version": "^9",
    "ts-jest": "^27",
    "ts-node": "^10",
    "typescript": "*",
  },
  "engines": Object {
    "node": ">= 14.18.0",
  },
  "jest": Object {
    "clearMocks": true,
    "collectCoverage": true,
    "collectCoverageFrom": Array [
      "src/**/*.ts",
    ],
    "coverageDirectory": "coverage",
    "coveragePathIgnorePatterns": Array [
      "/node_modules/",
    ],
    "coverageReporters": Array [
      "json",
      "lcov",
      "clover",
      "cobertura",
      "text",
    ],
    "globals": Object {
      "ts-jest": Object {
        "tsconfig": "tsconfig.dev.json",
      },
    },
    "preset": "ts-jest",
    "reporters": Array [
      "default",
      Array [
        "jest-junit",
        Object {
          "outputDirectory": "test-reports",
        },
      ],
    ],
    "testMatch": Array [
      "<rootDir>/src/**/__tests__/**/*.ts?(x)",
      "<rootDir>/(test|src)/**/*(*.)@(spec|test).ts?(x)",
    ],
    "testPathIgnorePatterns": Array [
      "/node_modules/",
    ],
    "watchPathIgnorePatterns": Array [
      "/node_modules/",
    ],
  },
  "jsii": Object {
    "outdir": "dist",
    "targets": Object {},
    "tsc": Object {
      "outDir": "lib",
      "rootDir": "src",
    },
  },
  "keywords": Array [
    "cdk",
  ],
  "license": "UNLICENSED",
  "main": "lib/index.js",
  "name": "@time-loop/test",
  "peerDependencies": Object {
    "aws-cdk-lib": "^2.1.0",
    "constructs": "^10.0.5",
  },
  "publishConfig": Object {
    "registry": "https://npm.pkg.github.com/",
  },
  "repository": Object {
    "type": "git",
    "url": "https://github.com/time-loop/test.git",
  },
  "resolutions": Object {
    "@types/prettier": "2.6.0",
  },
  "scripts": Object {
    "build": "npx projen build",
    "bump": "npx projen bump",
    "clobber": "npx projen clobber",
    "compat": "npx projen compat",
    "compile": "npx projen compile",
    "default": "npx projen default",
    "docgen": "npx projen docgen",
    "eject": "npx projen eject",
    "eslint": "npx projen eslint",
    "package": "npx projen package",
    "package-all": "npx projen package-all",
    "package:js": "npx projen package:js",
    "post-compile": "npx projen post-compile",
    "post-upgrade": "npx projen post-upgrade",
    "pre-compile": "npx projen pre-compile",
    "projen": "npx projen",
    "release": "npx projen release",
    "test": "npx projen test",
    "test:update": "npx projen test:update",
    "test:watch": "npx projen test:watch",
    "unbump": "npx projen unbump",
    "upgrade": "npx projen upgrade",
    "watch": "npx projen watch",
  },
  "stability": "stable",
  "types": "lib/index.d.ts",
  "version": "0.0.0",
}
`;

exports[`ClickUpCdkTypeScriptApp defaults .projen/tasks.json 1`] = `
Object {
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
  "env": Object {
    "PATH": "$(npx -c \\"node -e \\\\\\"console.log(process.env.PATH)\\\\\\"\\")",
  },
  "tasks": Object {
    "build": Object {
      "description": "Full release build",
      "name": "build",
      "steps": Array [
        Object {
          "spawn": "default",
        },
        Object {
          "spawn": "pre-compile",
        },
        Object {
          "spawn": "compile",
        },
        Object {
          "spawn": "post-compile",
        },
        Object {
          "spawn": "test",
        },
        Object {
          "spawn": "package",
        },
      ],
    },
    "bump": Object {
      "condition": "! git log --oneline -1 | grep -q \\"chore(release):\\"",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "env": Object {
        "BUMPFILE": "dist/version.txt",
        "CHANGELOG": "dist/changelog.md",
        "OUTFILE": "package.json",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "",
      },
      "name": "bump",
      "steps": Array [
        Object {
          "builtin": "release/bump-version",
        },
      ],
    },
    "bundle": Object {
      "description": "Prepare assets",
      "name": "bundle",
    },
    "clobber": Object {
      "condition": "git diff --exit-code > /dev/null",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": Object {
        "BRANCH": "$(git branch --show-current)",
      },
      "name": "clobber",
      "steps": Array [
        Object {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \\"scratch\\" branch",
        },
        Object {
          "exec": "git checkout $BRANCH",
        },
        Object {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin",
        },
        Object {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit",
        },
        Object {
          "exec": "git clean -fdx",
          "name": "clean all untracked files",
        },
        Object {
          "say": "ready to rock! (unpushed commits are under the \\"scratch\\" branch)",
        },
      ],
    },
    "compile": Object {
      "description": "Only compile",
      "name": "compile",
    },
    "default": Object {
      "description": "Synthesize project files",
      "name": "default",
      "steps": Array [
        Object {
          "exec": "node .projenrc.js",
        },
      ],
    },
    "deploy": Object {
      "description": "Deploys your CDK app to the AWS cloud",
      "name": "deploy",
      "steps": Array [
        Object {
          "exec": "cdk deploy",
        },
      ],
    },
    "destroy": Object {
      "description": "Destroys your cdk app in the AWS cloud",
      "name": "destroy",
      "steps": Array [
        Object {
          "exec": "cdk destroy",
        },
      ],
    },
    "diff": Object {
      "description": "Diffs the currently deployed app against your code",
      "name": "diff",
      "steps": Array [
        Object {
          "exec": "cdk diff",
        },
      ],
    },
    "eject": Object {
      "description": "Remove projen from the project",
      "env": Object {
        "PROJEN_EJECTING": "true",
      },
      "name": "eject",
      "steps": Array [
        Object {
          "spawn": "default",
        },
      ],
    },
    "eslint": Object {
      "description": "Runs eslint against the codebase",
      "name": "eslint",
      "steps": Array [
        Object {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src test build-tools .projenrc.js",
        },
      ],
    },
    "package": Object {
      "description": "Creates the distribution package",
      "name": "package",
    },
    "post-compile": Object {
      "description": "Runs after successful compilation",
      "name": "post-compile",
      "steps": Array [
        Object {
          "spawn": "synth:silent",
        },
      ],
    },
    "post-upgrade": Object {
      "description": "Runs after upgrading dependencies",
      "name": "post-upgrade",
    },
    "pre-compile": Object {
      "description": "Prepare the project for compilation",
      "name": "pre-compile",
    },
    "release": Object {
      "description": "Prepare a release from \\"main\\" branch",
      "env": Object {
        "RELEASE": "true",
      },
      "name": "release",
      "steps": Array [
        Object {
          "exec": "rm -fr dist",
        },
        Object {
          "spawn": "bump",
        },
        Object {
          "spawn": "build",
        },
        Object {
          "spawn": "unbump",
        },
        Object {
          "exec": "git diff --ignore-space-at-eol --exit-code",
        },
      ],
    },
    "synth": Object {
      "description": "Synthesizes your cdk app into cdk.out",
      "name": "synth",
      "steps": Array [
        Object {
          "exec": "cdk synth",
        },
      ],
    },
    "synth:silent": Object {
      "description": "Synthesizes your cdk app into cdk.out and suppresses the template in stdout (part of \\"yarn build\\")",
      "name": "synth:silent",
      "steps": Array [
        Object {
          "exec": "cdk synth -q",
        },
      ],
    },
    "test": Object {
      "description": "Run tests",
      "name": "test",
      "steps": Array [
        Object {
          "exec": "jest --passWithNoTests --all --updateSnapshot --coverageProvider=v8",
        },
        Object {
          "spawn": "eslint",
        },
      ],
    },
    "test:update": Object {
      "description": "Update jest snapshots",
      "name": "test:update",
      "steps": Array [
        Object {
          "exec": "jest --updateSnapshot",
        },
      ],
    },
    "test:watch": Object {
      "description": "Run jest in watch mode",
      "name": "test:watch",
      "steps": Array [
        Object {
          "exec": "jest --watch",
        },
      ],
    },
    "unbump": Object {
      "description": "Restores version to 0.0.0",
      "env": Object {
        "BUMPFILE": "dist/version.txt",
        "CHANGELOG": "dist/changelog.md",
        "OUTFILE": "package.json",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "",
      },
      "name": "unbump",
      "steps": Array [
        Object {
          "builtin": "release/reset-version",
        },
      ],
    },
    "unit-test": Object {
      "description": "Run unit tests only.",
      "name": "unit-test",
      "steps": Array [
        Object {
          "exec": "jest --passWithNoTests --all --updateSnapshot --coverageProvider=v8 test/unit",
        },
        Object {
          "spawn": "eslint",
        },
      ],
    },
    "upgrade": Object {
      "description": "upgrade dependencies",
      "env": Object {
        "CI": "0",
      },
      "name": "upgrade",
      "steps": Array [
        Object {
          "exec": "yarn upgrade npm-check-updates",
        },
        Object {
          "exec": "npm-check-updates --dep dev --upgrade --target=minor",
        },
        Object {
          "exec": "npm-check-updates --dep optional --upgrade --target=minor",
        },
        Object {
          "exec": "npm-check-updates --dep peer --upgrade --target=minor",
        },
        Object {
          "exec": "npm-check-updates --dep prod --upgrade --target=minor",
        },
        Object {
          "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
        },
        Object {
          "exec": "yarn install --check-files",
        },
        Object {
          "exec": "yarn upgrade",
        },
        Object {
          "exec": "npx projen",
        },
        Object {
          "spawn": "post-upgrade",
        },
      ],
    },
    "watch": Object {
      "description": "Watches changes in your source code and rebuilds and deploys to the current account",
      "name": "watch",
      "steps": Array [
        Object {
          "exec": "cdk deploy --hotswap",
        },
        Object {
          "exec": "cdk watch",
        },
      ],
    },
  },
}
`;

exports[`ClickUpCdkTypeScriptApp defaults README.md 1`] = `"# replace this"`;

exports[`ClickUpCdkTypeScriptApp defaults package.json 1`] = `
Object {
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
  "author": Object {
    "name": "ClickUp",
    "organization": true,
  },
  "dependencies": Object {
    "@time-loop/cdk-library": "*",
    "@time-loop/cdk-named-environments": "*",
    "@time-loop/clickup-projen": "*",
    "aws-cdk-lib": "^2.1.0",
    "cdk-constants": "*",
    "constructs": "^10.0.5",
    "multi-convention-namer": "*",
  },
  "devDependencies": Object {
    "@time-loop/clickup-projen": "*",
    "@types/jest": "^27",
    "@types/node": "^14",
    "@typescript-eslint/eslint-plugin": "^5",
    "@typescript-eslint/parser": "^5",
    "aws-cdk": "^2.1.0",
    "esbuild": "*",
    "eslint": "^8",
    "eslint-config-prettier": "*",
    "eslint-import-resolver-node": "*",
    "eslint-import-resolver-typescript": "*",
    "eslint-plugin-import": "*",
    "eslint-plugin-prettier": "*",
    "jest": "^27",
    "jest-junit": "^13",
    "jsii-release": "*",
    "json-schema": "*",
    "npm-check-updates": "^15",
    "prettier": "*",
    "projen": "*",
    "standard-version": "^9",
    "ts-jest": "^27",
    "ts-node": "^10",
    "typescript": "*",
  },
  "engines": Object {
    "node": ">= 14.18.0",
  },
  "jest": Object {
    "clearMocks": true,
    "collectCoverage": true,
    "collectCoverageFrom": Array [
      "src/**/*.ts",
    ],
    "coverageDirectory": "coverage",
    "coveragePathIgnorePatterns": Array [
      "/node_modules/",
      "/src/main.ts",
    ],
    "coverageReporters": Array [
      "json",
      "lcov",
      "clover",
      "cobertura",
      "text",
    ],
    "globals": Object {
      "ts-jest": Object {
        "tsconfig": "tsconfig.dev.json",
      },
    },
    "preset": "ts-jest",
    "reporters": Array [
      "default",
      Array [
        "jest-junit",
        Object {
          "outputDirectory": "test-reports",
        },
      ],
    ],
    "testMatch": Array [
      "<rootDir>/src/**/__tests__/**/*.ts?(x)",
      "<rootDir>/(test|src)/**/*(*.)@(spec|test).ts?(x)",
    ],
    "testPathIgnorePatterns": Array [
      "/node_modules/",
    ],
    "watchPathIgnorePatterns": Array [
      "/node_modules/",
    ],
  },
  "license": "UNLICENSED",
  "name": "test",
  "publishConfig": Object {
    "registry": "https://npm.pkg.github.com/",
  },
  "scripts": Object {
    "build": "npx projen build",
    "bump": "npx projen bump",
    "bundle": "npx projen bundle",
    "clobber": "npx projen clobber",
    "compile": "npx projen compile",
    "default": "npx projen default",
    "deploy": "npx projen deploy",
    "destroy": "npx projen destroy",
    "diff": "npx projen diff",
    "eject": "npx projen eject",
    "eslint": "npx projen eslint",
    "package": "npx projen package",
    "post-compile": "npx projen post-compile",
    "post-upgrade": "npx projen post-upgrade",
    "pre-compile": "npx projen pre-compile",
    "projen": "npx projen",
    "release": "npx projen release",
    "synth": "npx projen synth",
    "synth:silent": "npx projen synth:silent",
    "test": "npx projen test",
    "test:update": "npx projen test:update",
    "test:watch": "npx projen test:watch",
    "unbump": "npx projen unbump",
    "unit-test": "npx projen unit-test",
    "upgrade": "npx projen upgrade",
    "watch": "npx projen watch",
  },
  "version": "0.0.0",
}
`;

exports[`ClickUpCdkTypeScriptApp defaults src/main.ts 1`] = `
"import { core } from '@time-loop/cdk-library';
import { App } from 'aws-cdk-lib';
import { Namer } from 'multi-convention-namer';

import { WidgetStack } from './widget';

const app = new App();
const env = process.env.AWS_PROFILE || (process.env.CI ? 'usDev' : '');
const region = process.env.AWS_REGION || (process.env.CI ? 'us-east-1' : undefined);
if (!env) {
  console.log('You should probably set AWS_PROFILE before using this.');
}
const namedEnvFactory = core.Environment.findByName(env);
const namedEnv = namedEnvFactory(region);

console.log(\`Deploying to \${JSON.stringify(namedEnv.name)} in \${JSON.stringify(namedEnv.region)}.\`);

const commonProps = {
  businessUnit: core.BusinessUnit.PRODUCT,
  clickUpEnvironment: core.ClickUpEnvironment.PRODUCTION,
  clickUpRole: core.ClickUpRole.APP,
  confidentiality: core.Confidentiality.PUBLIC,
  namedEnv,
};
new WidgetStack(app, new Namer(['my', 'cool', 'widget']), {
  ...commonProps,
  managedPolicyName: 'yarf',
});

app.synth();
"
`;

exports[`ClickUpCdkTypeScriptApp defaults src/widget.ts 1`] = `
"
import { core } from '@time-loop/cdk-library';
import { aws_iam, aws_kms, RemovalPolicy } from 'aws-cdk-lib';
import { Construct } from 'constructs';
import { Namer } from 'multi-convention-namer';

export interface WidgetProps {
  /**
   * The name to assign the widget policy.
   * @default - have CDK generate a unique name
   */
  readonly managedPolicyName?: string;
}

/**
 * Useful comment describing the Widget construct.
 */
export class Widget extends Construct {
  // Expose the policy for use by another Construct in this Stack.
  // WARNING: cdk absolutely will let you pass objects between stacks.
  // This will generate CfnOutputs that will in turn create tight coupling between stacks.
  // This is almost never a Good Idea.
  // Instead, consider using \`core.Param.put\` to put the ARN
  // and then use myThingy.fromThingyArn() to instantiate a Interface object.
  readonly policy: aws_iam.ManagedPolicy;

  constructor(scope: Construct, id: Namer, props: WidgetProps) {
    super(scope, id.pascal);

    const key = new aws_kms.Key(this, 'Key', {
      removalPolicy: RemovalPolicy.DESTROY,
    });
    // Save the key ARN using SSM, for use by another Stack
    core.Param.put(key, 'keyArn', { rootId: 'ThisAppName' });

    this.policy = new aws_iam.ManagedPolicy(this, 'Policy', {
      managedPolicyName: props.managedPolicyName,
    });

    // Pull the distributionId from an SSM parameter
    const distributionId = core.Param.get(this, 'distributionId', {
      rootId: 'SomeOtherApp',
      stackId: 'SomeOtherStack',
      constructId: 'FooBar',
    });

    // Note that the \`allow()\` is implicit for PolicyStatements
    this.policy.addStatements(
      // Reference the ARN of a locally created thing.
      new aws_iam.PolicyStatement({ sid: 'DescriptiveName', actions: ['kms:Decrypt*'], resources: [key.keyArn] }),
      // Reference the distributionId from an SSM parameter
      new aws_iam.PolicyStatement({
        sid: 'GrantInvalidation',
        actions: ['cloudfront:CreateInvalidation'],
        resources: [\`arn:aws:cloudfront::\${distributionId}:*\`],
      }),
    );
  }
}

export interface WidgetStackProps extends core.StackProps, WidgetProps {}

export class WidgetStack extends core.Stack {
  constructor(scope: Construct, id: Namer, props: WidgetStackProps) {
    super(scope, id, props);

    const widget = new Widget(this, id, props);

    // Example of passing the widget.policy to another construct in the same stack.
    // \`\`\`
    // new FrozzleBop(this, id, { policy: widget.policy });
    // \`\`\`
    // placeholder to keep lint happy
    console.log(widget.policy.managedPolicyArn);
  }
}
"
`;

exports[`ClickUpCdkTypeScriptApp defaults test/widget.test.ts 1`] = `
"import { core } from '@time-loop/cdk-library';
import { App, assertions } from 'aws-cdk-lib';
import { Namer } from 'multi-convention-namer';
import { WidgetStack } from '../src/widget';

// Minimum props required by @time-loop/cdk-library/core.StackProps
const commonProps = {
  businessUnit: core.BusinessUnit.PRODUCT,
  clickUpEnvironment: core.ClickUpEnvironment.PRODUCTION,
  clickUpRole: core.ClickUpRole.APP,
  confidentiality: core.Confidentiality.PUBLIC,
  namedEnv: core.Environment.usDev('us-west-2'),
};

describe('Widget', () => {
  describe('default', () => {
    // These are resources shared by all the tests in this context.
    const app = new App();
    const stack = new WidgetStack(app, new Namer(['test']), commonProps);
    const template = assertions.Template.fromStack(stack);

    // Tests are super thin, consisting of just an assertion.
    test('creates resources', () => {
      ['AWS::IAM::ManagedPolicy', 'AWS::KMS::Key'].forEach((resource) => template.resourceCountIs(resource, 1));
    });

    // Demonstrate super-cool matcher stuff
    test('policy should reference key', () => {
      template.hasResourceProperties('AWS::IAM::ManagedPolicy', {
        PolicyDocument: {
          // The statement array must contain the following array.
          Statement: assertions.Match.arrayWith([
            assertions.Match.objectLike({
              // The array must contain an object with at least the following key / value.
              Resource: {
                'Fn::GetAtt': [
                  assertions.Match.anyValue(), // TODO: figure out how to actually reference the generated Kms key
                  'Arn',
                ],
              },
            }),
          ]),
        },
      });
    });
  });

  describe('options', () => {
    // Here we aren't sharing setup code...
    test('managedPolicyName', () => {
      // ...because each test is exercising a specific part of the functionality.
      // Which means that setups are slightly different and we can't re-use things.
      const app = new App();
      const stack = new WidgetStack(app, new Namer(['test']), {
        ...commonProps,
        managedPolicyName: 'fakeName',
      });
      const template = assertions.Template.fromStack(stack);

      template.hasResourceProperties('AWS::IAM::ManagedPolicy', {
        ManagedPolicyName: 'fakeName',
      });
    });
  });
});
"
`;
