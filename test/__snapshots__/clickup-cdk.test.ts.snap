// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ClickUpCdkConstructLibrary defaults package.json 1`] = `
Object {
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
  "author": Object {
    "email": "devops@clickup.com",
    "name": "ClickUp",
    "organization": true,
  },
  "devDependencies": Object {
    "@types/jest": "^27",
    "@types/node": "^14",
    "@typescript-eslint/eslint-plugin": "^5",
    "@typescript-eslint/parser": "^5",
    "aws-cdk-lib": "2.1.0",
    "constructs": "10.0.5",
    "esbuild": "*",
    "eslint": "^8",
    "eslint-config-prettier": "*",
    "eslint-import-resolver-node": "*",
    "eslint-import-resolver-typescript": "*",
    "eslint-plugin-import": "*",
    "eslint-plugin-prettier": "*",
    "jest": "^27",
    "jest-junit": "^15",
    "jsii": "5.0.*",
    "jsii-diff": "*",
    "jsii-docgen": "*",
    "jsii-pacmak": "*",
    "jsii-release": "*",
    "npm-check-updates": "^16",
    "prettier": "*",
    "projen": "*",
    "standard-version": "^9",
    "ts-jest": "^27",
    "ts-node": "^10",
    "typescript": "*",
  },
  "engines": Object {
    "node": ">= 14.18.0",
  },
  "jest": Object {
    "clearMocks": true,
    "collectCoverage": true,
    "collectCoverageFrom": Array [
      "src/**/*.ts",
    ],
    "coverageDirectory": "coverage",
    "coveragePathIgnorePatterns": Array [
      "/node_modules/",
    ],
    "coverageReporters": Array [
      "json",
      "lcov",
      "clover",
      "cobertura",
      "text",
    ],
    "globals": Object {
      "ts-jest": Object {
        "tsconfig": "tsconfig.dev.json",
      },
    },
    "preset": "ts-jest",
    "reporters": Array [
      "default",
      Array [
        "jest-junit",
        Object {
          "outputDirectory": "test-reports",
        },
      ],
    ],
    "testMatch": Array [
      "<rootDir>/src/**/__tests__/**/*.ts?(x)",
      "<rootDir>/(test|src)/**/*(*.)@(spec|test).ts?(x)",
    ],
    "testPathIgnorePatterns": Array [
      "/node_modules/",
    ],
    "watchPathIgnorePatterns": Array [
      "/node_modules/",
    ],
  },
  "jsii": Object {
    "outdir": "dist",
    "targets": Object {},
    "tsc": Object {
      "outDir": "lib",
      "rootDir": "src",
    },
  },
  "keywords": Array [
    "cdk",
  ],
  "license": "UNLICENSED",
  "main": "lib/index.js",
  "name": "@time-loop/test",
  "peerDependencies": Object {
    "aws-cdk-lib": "^2.1.0",
    "constructs": "^10.0.5",
  },
  "publishConfig": Object {
    "registry": "https://npm.pkg.github.com/",
  },
  "repository": Object {
    "type": "git",
    "url": "https://github.com/time-loop/test.git",
  },
  "scripts": Object {
    "build": "npx projen build",
    "bump": "npx projen bump",
    "clobber": "npx projen clobber",
    "compat": "npx projen compat",
    "compile": "npx projen compile",
    "default": "npx projen default",
    "docgen": "npx projen docgen",
    "eject": "npx projen eject",
    "eslint": "npx projen eslint",
    "package": "npx projen package",
    "package-all": "npx projen package-all",
    "package:js": "npx projen package:js",
    "post-compile": "npx projen post-compile",
    "post-upgrade": "npx projen post-upgrade",
    "pre-compile": "npx projen pre-compile",
    "projen": "npx projen",
    "release": "npx projen release",
    "test": "npx projen test",
    "test:watch": "npx projen test:watch",
    "unbump": "npx projen unbump",
    "upgrade": "npx projen upgrade",
    "watch": "npx projen watch",
  },
  "stability": "stable",
  "types": "lib/index.d.ts",
  "version": "0.0.0",
}
`;

exports[`ClickUpCdkConstructLibrary options release_npm exists 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: GitHub Packages authorization
        env:
          NPM_TOKEN: \${{ secrets.ALL_PACKAGE_READ_TOKEN }}
        run: |-
          cat > .npmrc <<EOF
          //npm.pkg.github.com/:_authToken=\${NPM_TOKEN}
          @time-loop:registry=https://npm.pkg.github.com/
          EOF
      - name: Make cdk-ecr-deployment sane
        run: export FORCE_PREBUILT_LAMBDA=1
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16.20.0
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - name: release
        run: npx projen release
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: \${{ secrets.CODECOV_TOKEN }}
          directory: coverage
      - name: Check for new commits
        id: git_remote
        run: echo \\"latest_commit=$(git ls-remote origin -h \${{ github.ref }} | cut -f1)\\" >> $GITHUB_OUTPUT
      - name: Backup artifact permissions
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: cd dist && getfacl -R . > permissions-backup.acl
        continue-on-error: true
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 16.20.0
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Restore build artifact permissions
        run: cd dist && setfacl --restore=permissions-backup.acl
        continue-on-error: true
      - name: Prepare Repository
        run: mv dist .repo
      - name: Collect GitHub Metadata
        run: mv .repo/dist dist
      - name: Release
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then cat $errout; exit $exitcode; fi
  release_npm:
    name: Publish to npm
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 16.20.0
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Restore build artifact permissions
        run: cd dist && setfacl --restore=permissions-backup.acl
        continue-on-error: true
      - name: GitHub Packages authorization
        env:
          NPM_TOKEN: \${{ secrets.ALL_PACKAGE_READ_TOKEN }}
        run: |-
          cat > .npmrc <<EOF
          //npm.pkg.github.com/:_authToken=\${NPM_TOKEN}
          @time-loop:registry=https://npm.pkg.github.com/
          EOF
      - name: Make cdk-ecr-deployment sane
        run: export FORCE_PREBUILT_LAMBDA=1
      - name: Prepare Repository
        run: mv dist .repo
      - name: Install Dependencies
        run: cd .repo && yarn install --check-files --frozen-lockfile
      - name: Create js artifact
        run: cd .repo && npx projen package:js
      - name: Remove .npmrc file for release
        run: rm .npmrc
      - name: Collect js Artifact
        run: mv .repo/dist dist
      - name: Release
        env:
          NPM_DIST_TAG: latest
          NPM_REGISTRY: npm.pkg.github.com
          NPM_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        run: npx -p publib@latest publib-npm
  send_release_event:
    name: Send Release Event
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      CI: \\"true\\"
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Get version
        id: event_metadata
        run: echo \\"release_tag=$(cat dist/releasetag.txt)\\" >> $GITHUB_OUTPUT
      - name: Send Datadog event
        uses: Glennmen/datadog-event-action@fb18624879901f1ff0c3c7e1e102179793bfe948
        with:
          datadog_api_key: \${{ secrets.DD_PROJEN_RELEASE_API_KEY }}
          datadog_us: true
          event_title: Released @time-loop/test version \${{ steps.event_metadata.outputs.release_tag }}
          event_text: Released @time-loop/test version \${{ steps.event_metadata.outputs.release_tag }}
          event_priority: normal
          event_tags: \\"['project:@time-loop/test','release:true','version:\${{ steps.event_metadata.outputs.release_tag }}','actor:\${{ github.actor }}']\\"
  send_release_event_to_slack:
    name: Send Release Alert to Slack
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Get version
        id: event_metadata
        run: echo \\"release_tag=$(cat dist/releasetag.txt)\\" >> $GITHUB_OUTPUT
      - name: Send Slack webhook event
        uses: rtCamp/action-slack-notify@12e36fc18b0689399306c2e0b3e0f2978b7f1ee7
        env:
          SLACK_TITLE: \${{ github.repository }}@\${{ steps.event_metadata.outputs.release_tag }} released!
          SLACK_MESSAGE: \\"View the release notes here: https://github.com/\${{ github.repository }}/releases/tag/\${{ steps.event_metadata.outputs.release_tag }}\\"
          SLACK_WEBHOOK: \${{ secrets.PROJEN_RELEASE_SLACK_WEBHOOK }}
          SLACK_FOOTER: \\"\\"
          SLACK_COLOR: success
          MSG_MINIMAL: \\"true\\"
"
`;

exports[`ClickUpCdkTypeScriptApp defaults .github/workflows/release.yml 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: GitHub Packages authorization
        env:
          NPM_TOKEN: \${{ secrets.ALL_PACKAGE_READ_TOKEN }}
        run: |-
          cat > .npmrc <<EOF
          //npm.pkg.github.com/:_authToken=\${NPM_TOKEN}
          @time-loop:registry=https://npm.pkg.github.com/
          EOF
      - name: Make cdk-ecr-deployment sane
        run: export FORCE_PREBUILT_LAMBDA=1
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16.20.0
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - name: release
        run: npx projen release
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: \${{ secrets.CODECOV_TOKEN }}
          directory: coverage
      - name: Check for new commits
        id: git_remote
        run: echo \\"latest_commit=$(git ls-remote origin -h \${{ github.ref }} | cut -f1)\\" >> $GITHUB_OUTPUT
      - name: Backup artifact permissions
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: cd dist && getfacl -R . > permissions-backup.acl
        continue-on-error: true
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 16.20.0
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Restore build artifact permissions
        run: cd dist && setfacl --restore=permissions-backup.acl
        continue-on-error: true
      - name: Release
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then cat $errout; exit $exitcode; fi
  send_release_event:
    name: Send Release Event
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      CI: \\"true\\"
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Get version
        id: event_metadata
        run: echo \\"release_tag=$(cat dist/releasetag.txt)\\" >> $GITHUB_OUTPUT
      - name: Send Datadog event
        uses: Glennmen/datadog-event-action@fb18624879901f1ff0c3c7e1e102179793bfe948
        with:
          datadog_api_key: \${{ secrets.DD_PROJEN_RELEASE_API_KEY }}
          datadog_us: true
          event_title: Released test version \${{ steps.event_metadata.outputs.release_tag }}
          event_text: Released test version \${{ steps.event_metadata.outputs.release_tag }}
          event_priority: normal
          event_tags: \\"['project:test','release:true','version:\${{ steps.event_metadata.outputs.release_tag }}','actor:\${{ github.actor }}']\\"
  send_release_event_to_slack:
    name: Send Release Alert to Slack
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Get version
        id: event_metadata
        run: echo \\"release_tag=$(cat dist/releasetag.txt)\\" >> $GITHUB_OUTPUT
      - name: Send Slack webhook event
        uses: rtCamp/action-slack-notify@12e36fc18b0689399306c2e0b3e0f2978b7f1ee7
        env:
          SLACK_TITLE: \${{ github.repository }}@\${{ steps.event_metadata.outputs.release_tag }} released!
          SLACK_MESSAGE: \\"View the release notes here: https://github.com/\${{ github.repository }}/releases/tag/\${{ steps.event_metadata.outputs.release_tag }}\\"
          SLACK_WEBHOOK: \${{ secrets.PROJEN_RELEASE_SLACK_WEBHOOK }}
          SLACK_FOOTER: \\"\\"
          SLACK_COLOR: success
          MSG_MINIMAL: \\"true\\"
"
`;

exports[`ClickUpCdkTypeScriptApp defaults README.md 1`] = `"# replace this"`;

exports[`ClickUpCdkTypeScriptApp defaults package.json 1`] = `
Object {
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
  "author": Object {
    "name": "ClickUp",
    "organization": true,
  },
  "dependencies": Object {
    "@time-loop/cdk-library": "*",
    "@time-loop/cdk-named-environments": "*",
    "@time-loop/clickup-projen": "*",
    "aws-cdk-lib": "^2.87.0",
    "cdk-constants": "*",
    "constructs": "^10.0.5",
    "multi-convention-namer": "*",
  },
  "devDependencies": Object {
    "@types/jest": "^27",
    "@types/node": "^14",
    "@typescript-eslint/eslint-plugin": "^5",
    "@typescript-eslint/parser": "^5",
    "aws-cdk": "^2.87.0",
    "esbuild": "*",
    "eslint": "^8",
    "eslint-config-prettier": "*",
    "eslint-import-resolver-node": "*",
    "eslint-import-resolver-typescript": "*",
    "eslint-plugin-import": "*",
    "eslint-plugin-prettier": "*",
    "jest": "^27",
    "jest-junit": "^15",
    "jsii-release": "*",
    "npm-check-updates": "^16",
    "prettier": "*",
    "projen": "*",
    "standard-version": "^9",
    "ts-jest": "^27",
    "ts-node": "^10",
    "typescript": "*",
  },
  "engines": Object {
    "node": ">= 14.18.0",
  },
  "jest": Object {
    "clearMocks": true,
    "collectCoverage": true,
    "collectCoverageFrom": Array [
      "src/**/*.ts",
    ],
    "coverageDirectory": "coverage",
    "coveragePathIgnorePatterns": Array [
      "/node_modules/",
      "/src/main.ts",
    ],
    "coverageReporters": Array [
      "json",
      "lcov",
      "clover",
      "cobertura",
      "text",
    ],
    "globals": Object {
      "ts-jest": Object {
        "tsconfig": "tsconfig.dev.json",
      },
    },
    "preset": "ts-jest",
    "reporters": Array [
      "default",
      Array [
        "jest-junit",
        Object {
          "outputDirectory": "test-reports",
        },
      ],
    ],
    "testMatch": Array [
      "<rootDir>/src/**/__tests__/**/*.ts?(x)",
      "<rootDir>/(test|src)/**/*(*.)@(spec|test).ts?(x)",
    ],
    "testPathIgnorePatterns": Array [
      "/node_modules/",
    ],
    "watchPathIgnorePatterns": Array [
      "/node_modules/",
    ],
  },
  "license": "UNLICENSED",
  "name": "test",
  "publishConfig": Object {
    "registry": "https://npm.pkg.github.com/",
  },
  "scripts": Object {
    "build": "npx projen build",
    "bump": "npx projen bump",
    "bundle": "npx projen bundle",
    "clobber": "npx projen clobber",
    "compile": "npx projen compile",
    "default": "npx projen default",
    "deploy": "npx projen deploy",
    "destroy": "npx projen destroy",
    "diff": "npx projen diff",
    "eject": "npx projen eject",
    "eslint": "npx projen eslint",
    "package": "npx projen package",
    "post-compile": "npx projen post-compile",
    "post-upgrade": "npx projen post-upgrade",
    "pre-compile": "npx projen pre-compile",
    "projen": "npx projen",
    "release": "npx projen release",
    "synth": "npx projen synth",
    "synth:silent": "npx projen synth:silent",
    "test": "npx projen test",
    "test:watch": "npx projen test:watch",
    "unbump": "npx projen unbump",
    "upgrade": "npx projen upgrade",
    "watch": "npx projen watch",
  },
  "version": "0.0.0",
}
`;

exports[`ClickUpCdkTypeScriptApp defaults src/main.ts 1`] = `
"import { core } from '@time-loop/cdk-library';
import { App } from 'aws-cdk-lib';
import { Namer } from 'multi-convention-namer';

import { WidgetStack } from './widget';

const app = new App();
const env = process.env.AWS_PROFILE || (process.env.CI ? 'usDev' : '');
const region = process.env.AWS_REGION || (process.env.CI ? 'us-east-1' : undefined);
if (!env) {
  console.log('You should probably set AWS_PROFILE before using this.');
}
const namedEnvFactory = core.Environment.findByName(env);
const namedEnv = namedEnvFactory(region);

console.log(\`Deploying to \${JSON.stringify(namedEnv.name)} in \${JSON.stringify(namedEnv.region)}.\`);

const commonProps = {
  businessUnit: core.BusinessUnit.PRODUCT,
  clickUpEnvironment: core.ClickUpEnvironment.PRODUCTION,
  clickUpRole: core.ClickUpRole.APP,
  confidentiality: core.Confidentiality.PUBLIC,
  namedEnv,
};
new WidgetStack(app, new Namer(['my', 'cool', 'widget']), {
  ...commonProps,
  managedPolicyName: 'yarf',
});

app.synth();
"
`;

exports[`ClickUpCdkTypeScriptApp defaults src/widget.ts 1`] = `
"
import { core } from '@time-loop/cdk-library';
import { aws_iam, aws_kms, RemovalPolicy } from 'aws-cdk-lib';
import { Construct } from 'constructs';
import { Namer } from 'multi-convention-namer';

export interface WidgetProps {
  /**
   * The name to assign the widget policy.
   * @default - have CDK generate a unique name
   */
  readonly managedPolicyName?: string;
}

/**
 * Useful comment describing the Widget construct.
 */
export class Widget extends Construct {
  // Expose the policy for use by another Construct in this Stack.
  // WARNING: cdk absolutely will let you pass objects between stacks.
  // This will generate CfnOutputs that will in turn create tight coupling between stacks.
  // This is almost never a Good Idea.
  // Instead, consider using \`core.Param.put\` to put the ARN
  // and then use myThingy.fromThingyArn() to instantiate a Interface object.
  readonly policy: aws_iam.ManagedPolicy;

  constructor(scope: Construct, id: Namer, props: WidgetProps) {
    super(scope, id.pascal);

    const key = new aws_kms.Key(this, 'Key', {
      removalPolicy: RemovalPolicy.DESTROY,
    });
    // Save the key ARN using SSM, for use by another Stack
    core.Param.put(key, 'keyArn', { rootId: 'ThisAppName' });

    this.policy = new aws_iam.ManagedPolicy(this, 'Policy', {
      managedPolicyName: props.managedPolicyName,
    });

    // Pull the distributionId from an SSM parameter
    const distributionId = core.Param.get(this, 'distributionId', {
      rootId: 'SomeOtherApp',
      stackId: 'SomeOtherStack',
      constructId: 'FooBar',
    });

    // Note that the \`allow()\` is implicit for PolicyStatements
    this.policy.addStatements(
      // Reference the ARN of a locally created thing.
      new aws_iam.PolicyStatement({ sid: 'DescriptiveName', actions: ['kms:Decrypt*'], resources: [key.keyArn] }),
      // Reference the distributionId from an SSM parameter
      new aws_iam.PolicyStatement({
        sid: 'GrantInvalidation',
        actions: ['cloudfront:CreateInvalidation'],
        resources: [\`arn:aws:cloudfront::\${distributionId}:*\`],
      }),
    );
  }
}

export interface WidgetStackProps extends core.StackProps, WidgetProps {}

export class WidgetStack extends core.Stack {
  constructor(scope: Construct, id: Namer, props: WidgetStackProps) {
    super(scope, id, props);

    const widget = new Widget(this, id, props);

    // Example of passing the widget.policy to another construct in the same stack.
    // \`\`\`
    // new FrozzleBop(this, id, { policy: widget.policy });
    // \`\`\`
    // placeholder to keep lint happy
    console.log(widget.policy.managedPolicyArn);
  }
}
"
`;

exports[`ClickUpCdkTypeScriptApp defaults test/widget.test.ts 1`] = `
"import { core } from '@time-loop/cdk-library';
import { App, assertions } from 'aws-cdk-lib';
import { Namer } from 'multi-convention-namer';
import { WidgetStack } from '../src/widget';

// Minimum props required by @time-loop/cdk-library/core.StackProps
const commonProps = {
  businessUnit: core.BusinessUnit.PRODUCT,
  clickUpEnvironment: core.ClickUpEnvironment.PRODUCTION,
  clickUpRole: core.ClickUpRole.APP,
  confidentiality: core.Confidentiality.PUBLIC,
  namedEnv: core.Environment.usDev('us-west-2'),
};

describe('Widget', () => {
  describe('default', () => {
    // These are resources shared by all the tests in this context.
    const app = new App();
    const stack = new WidgetStack(app, new Namer(['test']), commonProps);
    const template = assertions.Template.fromStack(stack);

    // Tests are super thin, consisting of just an assertion.
    test('creates resources', () => {
      ['AWS::IAM::ManagedPolicy', 'AWS::KMS::Key'].forEach((resource) => template.resourceCountIs(resource, 1));
    });

    // Demonstrate super-cool matcher stuff
    test('policy should reference key', () => {
      template.hasResourceProperties('AWS::IAM::ManagedPolicy', {
        PolicyDocument: {
          // The statement array must contain the following array.
          Statement: assertions.Match.arrayWith([
            assertions.Match.objectLike({
              // The array must contain an object with at least the following key / value.
              Resource: {
                'Fn::GetAtt': [
                  assertions.Match.anyValue(), // TODO: figure out how to actually reference the generated Kms key
                  'Arn',
                ],
              },
            }),
          ]),
        },
      });
    });
  });

  describe('options', () => {
    // Here we aren't sharing setup code...
    test('managedPolicyName', () => {
      // ...because each test is exercising a specific part of the functionality.
      // Which means that setups are slightly different and we can't re-use things.
      const app = new App();
      const stack = new WidgetStack(app, new Namer(['test']), {
        ...commonProps,
        managedPolicyName: 'fakeName',
      });
      const template = assertions.Template.fromStack(stack);

      template.hasResourceProperties('AWS::IAM::ManagedPolicy', {
        ManagedPolicyName: 'fakeName',
      });
    });
  });
});
"
`;

exports[`cdk-diff additions - ClickUpCdkTypeScriptApp package.json 1`] = `
Object {
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
  "author": Object {
    "name": "ClickUp",
    "organization": true,
  },
  "dependencies": Object {
    "@time-loop/cdk-library": "*",
    "@time-loop/cdk-named-environments": "*",
    "@time-loop/clickup-projen": "*",
    "aws-cdk-lib": "^2.87.0",
    "cdk-constants": "*",
    "constructs": "^10.0.5",
    "multi-convention-namer": "*",
  },
  "devDependencies": Object {
    "@time-loop/cdk-log-parser": "latest",
    "@types/jest": "^27",
    "@types/node": "^14",
    "@typescript-eslint/eslint-plugin": "^5",
    "@typescript-eslint/parser": "^5",
    "aws-cdk": "^2.87.0",
    "esbuild": "*",
    "eslint": "^8",
    "eslint-config-prettier": "*",
    "eslint-import-resolver-node": "*",
    "eslint-import-resolver-typescript": "*",
    "eslint-plugin-import": "*",
    "eslint-plugin-prettier": "*",
    "jest": "^27",
    "jest-junit": "^15",
    "jsii-release": "*",
    "npm-check-updates": "^16",
    "prettier": "*",
    "projen": "*",
    "standard-version": "^9",
    "ts-jest": "^27",
    "ts-node": "^10",
    "typescript": "*",
  },
  "engines": Object {
    "node": ">= 14.18.0",
  },
  "jest": Object {
    "clearMocks": true,
    "collectCoverage": true,
    "collectCoverageFrom": Array [
      "src/**/*.ts",
    ],
    "coverageDirectory": "coverage",
    "coveragePathIgnorePatterns": Array [
      "/node_modules/",
      "/src/main.ts",
    ],
    "coverageReporters": Array [
      "json",
      "lcov",
      "clover",
      "cobertura",
      "text",
    ],
    "globals": Object {
      "ts-jest": Object {
        "tsconfig": "tsconfig.dev.json",
      },
    },
    "preset": "ts-jest",
    "reporters": Array [
      "default",
      Array [
        "jest-junit",
        Object {
          "outputDirectory": "test-reports",
        },
      ],
    ],
    "testMatch": Array [
      "<rootDir>/src/**/__tests__/**/*.ts?(x)",
      "<rootDir>/(test|src)/**/*(*.)@(spec|test).ts?(x)",
    ],
    "testPathIgnorePatterns": Array [
      "/node_modules/",
    ],
    "watchPathIgnorePatterns": Array [
      "/node_modules/",
    ],
  },
  "license": "UNLICENSED",
  "name": "test",
  "publishConfig": Object {
    "registry": "https://npm.pkg.github.com/",
  },
  "scripts": Object {
    "build": "npx projen build",
    "bump": "npx projen bump",
    "bundle": "npx projen bundle",
    "clobber": "npx projen clobber",
    "compile": "npx projen compile",
    "default": "npx projen default",
    "deploy": "npx projen deploy",
    "destroy": "npx projen destroy",
    "diff": "npx projen diff",
    "eject": "npx projen eject",
    "eslint": "npx projen eslint",
    "package": "npx projen package",
    "post-compile": "npx projen post-compile",
    "post-upgrade": "npx projen post-upgrade",
    "pre-compile": "npx projen pre-compile",
    "projen": "npx projen",
    "release": "npx projen release",
    "synth": "npx projen synth",
    "synth:silent": "npx projen synth:silent",
    "test": "npx projen test",
    "test:watch": "npx projen test:watch",
    "unbump": "npx projen unbump",
    "upgrade": "npx projen upgrade",
    "watch": "npx projen watch",
  },
  "version": "0.0.0",
}
`;

exports[`cdk-diff additions - ClickUpCdkTypeScriptApp src/github-actions-oidc-permissions.ts 1`] = `
"import { core } from '@time-loop/cdk-library';
import { aws_iam, Stage } from 'aws-cdk-lib';
import { Construct } from 'constructs';
import { Namer } from 'multi-convention-namer';

export class GitHubActionsOIDCPermissions extends core.Stack {
  static asStage(scope: Construct, stageName: string, stageProps: core.StageProps): Stage {
    return new (class extends Stage {
      constructor() {
        super(scope, stageName, stageProps);
        new GitHubActionsOIDCPermissions(this, stageProps);
      }
    })();
  }
  constructor(scope: Construct, props: core.StackProps) {
    const projectName = 'test';
    let id = new Namer([...projectName.split('-'), 'github', 'actions']);
    super(scope, id, props);

    const githubActionsRoleName = id.addSuffix(['role']).kebab;
    const githubActionsRole = new aws_iam.Role(this, githubActionsRoleName, {
      roleName: githubActionsRoleName,
      assumedBy: new aws_iam.FederatedPrincipal(
        \`arn:aws:iam::\${this.account}:oidc-provider/token.actions.githubusercontent.com\`,
        {
          StringEquals: {
            'token.actions.githubusercontent.com:aud': 'sts.amazonaws.com',
          },
          StringLike: {
            'token.actions.githubusercontent.com:sub': \`repo:time-loop/\${projectName}:*\`,
          },
        },
        'sts:AssumeRoleWithWebIdentity',
      ),
    });

    const githubActionsPolicyName = id.addSuffix(['policy']).kebab;
    const githubActionsPolicy = new aws_iam.Policy(this, githubActionsPolicyName, {
      policyName: githubActionsPolicyName,
      statements: [
        new aws_iam.PolicyStatement({
          effect: aws_iam.Effect.ALLOW,
          actions: ['cloudformation:Describe*', 'cloudformation:List*', 'cloudformation:Get*'],
          resources: ['*'],
        }),
      ],
    });

    // Attach IAM policy to IAM role
    githubActionsPolicy.attachToRole(githubActionsRole);
  }
}
"
`;
